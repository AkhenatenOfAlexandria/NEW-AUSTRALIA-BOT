import discord
from discord.ext import commands
import logging

from UTILS.CONFIGURATION import GUILD_ID

# Import all hospital components
from cogs.HOSPITAL.HOSPITAL_CORE import HospitalCore
from cogs.HOSPITAL.HOSPITAL_FINANCIAL import HospitalFinancial
from cogs.HOSPITAL.HOSPITAL_TREATMENT import HospitalTreatment
from cogs.HOSPITAL.HOSPITAL_PROCESSOR import HospitalProcessor
from cogs.HOSPITAL.HOSPITAL_COMMANDS import HospitalCommands
from cogs.HOSPITAL.HOSPITAL_STATISTICS_COMMANDS import HospitalStatsCommands

GUILD = discord.Object(id=GUILD_ID)


class HospitalSystem(commands.Cog):
    """
    Main Hospital System cog that coordinates all hospital components.
    
    This system provides:
    - Automatic transport for unconscious users
    - Comprehensive healing until conscious or funds exhausted
    - Multiple healing sessions per cycle
    - Detailed logging and statistics (retained indefinitely by default)
    - Financial management with no taxes
    - Discord commands for management and monitoring
    - Database optimization and backup capabilities
    - Complete Health Log integration
    """
    
    def __init__(self, bot):
        self.bot = bot
        
        # Initialize all components
        self.core = HospitalCore(bot)
        self.financial = HospitalFinancial(self.core)
        self.treatment = HospitalTreatment(self.core, self.financial)
        self.processor = HospitalProcessor(self.core, self.treatment)
        
        # Add command cogs
        self.commands = HospitalCommands(bot, self.core, self.treatment)
        self.stats_commands = HospitalStatsCommands(bot, self.core, self.treatment)
        
        # Initialize the cog commands list
        self.__cog_app_commands__ = []
        
        # Add commands to this cog
        self._add_commands()
        
        logging.info("‚úÖ Hospital System initialized with all components (indefinite log retention)")
    
    def _add_commands(self):
        """Add all commands from component cogs to this main cog"""
        # Add basic hospital commands
        for command in self.commands.get_app_commands():
            self.__cog_app_commands__.append(command)
        
        # Add statistics commands
        for command in self.stats_commands.get_app_commands():
            self.__cog_app_commands__.append(command)
    
    # Public interface methods for other systems to use
    
    def is_in_hospital(self, user_id):
        """Check if user is currently in hospital"""
        return self.core.is_in_hospital(user_id)
    
    def is_user_in_combat(self, user_id):
        """Check if user is in combat (used by other systems)"""
        return self.core.is_user_in_combat(user_id)
    
    async def process_unconscious_users(self):
        """Main processing function called by the bot's timer"""
        await self.processor.process_unconscious_users()
    
    async def get_hospital_status(self):
        """Get current hospital system status"""
        return await self.processor.get_current_hospital_status()
    
    async def manual_transport(self, user_id):
        """Manually transport a user (for admin use)"""
        return await self.treatment.transport_to_hospital(user_id)
    
    async def manual_healing(self, user_id):
        """Manually trigger healing for a user (for admin use)"""
        return await self.treatment.attempt_maximum_healing(user_id)
    
    def get_service_costs(self):
        """Get current service costs"""
        return self.financial.get_service_costs()
    
    def log_external_action(self, user_id, username, action_type, **kwargs):
        """Allow external systems to log hospital-related actions"""
        return self.core.log_hospital_action(user_id, username, action_type, **kwargs)
    
    def get_log_statistics(self):
        """Get hospital log statistics"""
        return self.core.get_log_statistics()
    
    def perform_maintenance(self, force_backup=False):
        """Perform log maintenance (backup, optimization, etc.)"""
        return self.core.perform_maintenance(force_backup)
    
    # Cog lifecycle methods
    
    async def cog_load(self):
        """Called when the cog is loaded"""
        logging.info("üè• Hospital System cog loaded successfully")
        
        # Send startup message to health log
        await self.core.send_info_to_health_log(
            "Hospital System has been loaded and is now operational. All medical services are available.",
            "üè• Hospital System Online"
        )
    
    async def cog_unload(self):
        """Called when the cog is unloaded"""
        logging.info("üè• Hospital System cog unloaded")
        
        # Send shutdown message to health log
        await self.core.send_warning_to_health_log(
            "Hospital System is being unloaded. Medical services will be temporarily unavailable.",
            "üè• Hospital System Offline"
        )
    
    # Emergency admin commands that bypass normal restrictions
    
    @commands.command(name="hospital_emergency_status")
    @commands.is_owner()
    async def emergency_status(self, ctx):
        """Emergency status check for bot owner"""
        try:
            await self.core.send_info_to_health_log(
                f"Emergency status check initiated by {ctx.author.display_name}",
                "üö® Emergency Status Check"
            )
            
            status = await self.get_hospital_status()
            if status:
                embed = discord.Embed(
                    title="üö® Emergency Hospital Status",
                    color=0xff0000
                )
                
                embed.add_field(
                    name="üìä Current Status",
                    value=f"Total Users: {status['total_users']}\n"
                          f"Unconscious: {status['unconscious_users']}\n"
                          f"In Hospital: {status['users_in_hospital']}\n"
                          f"In Combat: {status['users_in_combat']}\n"
                          f"Conscious in Hospital: {status['conscious_in_hospital']}",
                    inline=False
                )
                
                await ctx.send(embed=embed)
                
                # Also send to health log
                await self.core.send_info_to_health_log(
                    f"Emergency status: {status['unconscious_users']} unconscious, {status['users_in_hospital']} in hospital, {status['users_in_combat']} in combat",
                    "üìä Emergency Status Results"
                )
            else:
                await ctx.send("‚ùå Failed to get hospital status")
                await self.core.send_error_to_health_log(
                    "Emergency status check failed - could not retrieve hospital status",
                    "System may be experiencing issues"
                )
        
        except Exception as e:
            await ctx.send(f"‚ùå Emergency status check failed: {e}")
            logging.error(f"‚ùå Emergency status check failed: {e}")
            await self.core.send_error_to_health_log(
                f"Emergency status check failed: {str(e)}",
                "Exception occurred during emergency status check"
            )
    
    @commands.command(name="hospital_force_cycle")
    @commands.is_owner()
    async def force_cycle(self, ctx):
        """Force a hospital processing cycle"""
        try:
            await ctx.send("üè• Starting forced hospital cycle...")
            
            await self.core.send_info_to_health_log(
                f"Forced hospital cycle initiated by {ctx.author.display_name}",
                "üîß Manual Cycle Override"
            )
            
            await self.process_unconscious_users()
            await ctx.send("‚úÖ Hospital cycle completed")
            
            await self.core.send_info_to_health_log(
                f"Forced hospital cycle completed successfully by {ctx.author.display_name}",
                "‚úÖ Manual Cycle Complete"
            )
            
        except Exception as e:
            await ctx.send(f"‚ùå Forced cycle failed: {e}")
            logging.error(f"‚ùå Forced hospital cycle failed: {e}")
            await self.core.send_error_to_health_log(
                f"Forced hospital cycle failed: {str(e)}",
                f"Manual cycle initiated by {ctx.author.display_name} encountered an error"
            )
    
    @commands.command(name="hospital_system_info")
    @commands.is_owner()
    async def system_info(self, ctx):
        """Get detailed system information"""
        try:
            await self.core.send_info_to_health_log(
                f"System information requested by {ctx.author.display_name}",
                "üìã System Info Request"
            )
            
            embed = discord.Embed(
                title="üè• Hospital System Information",
                color=0x3498db
            )
            
            # Component status
            embed.add_field(
                name="üîß Components",
                value=f"Core: {'‚úÖ' if self.core else '‚ùå'}\n"
                      f"Financial: {'‚úÖ' if self.financial else '‚ùå'}\n"
                      f"Treatment: {'‚úÖ' if self.treatment else '‚ùå'}\n"
                      f"Processor: {'‚úÖ' if self.processor else '‚ùå'}\n"
                      f"Commands: {'‚úÖ' if self.commands else '‚ùå'}\n"
                      f"Stats Commands: {'‚úÖ' if self.stats_commands else '‚ùå'}\n"
                      f"Maintenance: {'‚úÖ' if hasattr(self.core, 'maintenance') and self.core.maintenance else '‚ùå'}",
                inline=True
            )
            
            # Service costs
            costs = self.get_service_costs()
            embed.add_field(
                name="üí∞ Service Costs",
                value=f"Transport: ‚Ç™{costs['transport']:,}\n"
                      f"Healing per HP: ‚Ç™{costs['healing_per_hp']:,}",
                inline=True
            )
            
            # Log statistics
            log_stats = self.get_log_statistics()
            if log_stats:
                embed.add_field(
                    name="üìä Log Statistics",
                    value=f"Total Logs: {log_stats['total_logs']:,}\n"
                          f"Size: {log_stats['estimated_size_mb']} MB\n"
                          f"Recent Activity: {log_stats['recent_activity_7d']} (7d)",
                    inline=True
                )
            
            # System capabilities
            embed.add_field(
                name="‚öôÔ∏è Capabilities",
                value="‚Ä¢ Automatic transport\n"
                      "‚Ä¢ Comprehensive healing\n"
                      "‚Ä¢ Multiple sessions per cycle\n"
                      "‚Ä¢ Indefinite log retention\n"
                      "‚Ä¢ Database optimization\n"
                      "‚Ä¢ Automatic backups\n"
                      "‚Ä¢ Financial management\n"
                      "‚Ä¢ Statistics tracking\n"
                      "‚Ä¢ Health Log integration",
                inline=False
            )
            
            # Health Log status
            health_log_channel = await self.core.get_health_log_channel()
            if health_log_channel:
                embed.add_field(
                    name="üìù Health Log",
                    value=f"‚úÖ Connected to #{health_log_channel.name}",
                    inline=True
                )
            else:
                embed.add_field(
                    name="üìù Health Log",
                    value="‚ùå No health log channel available",
                    inline=True
                )
            
            # Maintenance info
            if hasattr(self.core, 'maintenance') and self.core.maintenance:
                maintenance_status = self.core.maintenance.get_maintenance_status()
                retention_text = 'Indefinite' if not maintenance_status['retention_enabled'] else f'{maintenance_status["retention_days"]} days'
                embed.add_field(
                    name="üõ†Ô∏è Maintenance Status",
                    value=f"Log Retention: {retention_text}\n"
                          f"Backups: {'Enabled' if maintenance_status['backup_enabled'] else 'Disabled'}\n"
                          f"Indexes: {'Optimized' if maintenance_status['indexes_enabled'] else 'Basic'}",
                    inline=True
                )
            
            embed.set_footer(text="Hospital System - Enhanced Modular Architecture with Health Log Integration")
            await ctx.send(embed=embed)
            
        except Exception as e:
            await ctx.send(f"‚ùå System info failed: {e}")
            logging.error(f"‚ùå Hospital system info failed: {e}")
            await self.core.send_error_to_health_log(
                f"System info request failed: {str(e)}",
                f"Error occurred while processing info request from {ctx.author.display_name}"
            )
    
    @commands.command(name="hospital_maintenance")
    @commands.is_owner()
    async def perform_maintenance_command(self, ctx, force_backup: bool = False):
        """Perform hospital system maintenance"""
        try:
            await ctx.send("üõ†Ô∏è Starting hospital system maintenance...")
            
            await self.core.send_info_to_health_log(
                f"System maintenance initiated by {ctx.author.display_name} (force_backup: {force_backup})",
                "üõ†Ô∏è Maintenance Started"
            )
            
            if hasattr(self.core, 'maintenance') and self.core.maintenance:
                result = self.perform_maintenance(force_backup)
                if result:
                    await ctx.send("‚úÖ Hospital maintenance completed successfully")
                    
                    await self.core.send_info_to_health_log(
                        "System maintenance completed successfully",
                        "‚úÖ Maintenance Complete"
                    )
                    
                    # Show updated statistics
                    stats = self.get_log_statistics()
                    if stats:
                        embed = discord.Embed(
                            title="üìä Post-Maintenance Statistics",
                            color=0x2ecc71
                        )
                        embed.add_field(
                            name="Log Stats",
                            value=f"Total Entries: {stats['total_logs']:,}\n"
                                  f"Estimated Size: {stats['estimated_size_mb']} MB\n"
                                  f"Date Range: {stats['oldest_log']} to {stats['newest_log']}",
                            inline=False
                        )
                        await ctx.send(embed=embed)
                        
                        # Also send to health log
                        await self.core.send_info_to_health_log(
                            f"Post-maintenance statistics: {stats['total_logs']:,} entries, {stats['estimated_size_mb']} MB",
                            "üìä Maintenance Statistics"
                        )
                else:
                    await ctx.send("‚ÑπÔ∏è No maintenance was needed")
                    await self.core.send_info_to_health_log(
                        "No maintenance was required at this time",
                        "‚ÑπÔ∏è Maintenance Skipped"
                    )
            else:
                await ctx.send("‚ùå Maintenance system not available")
                await self.core.send_error_to_health_log(
                    "Maintenance system not available - maintenance component not loaded",
                    "System may be running in reduced functionality mode"
                )
                
        except Exception as e:
            await ctx.send(f"‚ùå Maintenance failed: {e}")
            logging.error(f"‚ùå Hospital maintenance failed: {e}")
            await self.core.send_error_to_health_log(
                f"System maintenance failed: {str(e)}",
                f"Maintenance initiated by {ctx.author.display_name} encountered an error"
            )
    
    @commands.command(name="hospital_log_stats")
    @commands.is_owner()
    async def log_statistics(self, ctx):
        """Get detailed log statistics"""
        try:
            await self.core.send_info_to_health_log(
                f"Log statistics requested by {ctx.author.display_name}",
                "üìä Log Statistics Request"
            )
            
            stats = self.get_log_statistics()
            if not stats:
                await ctx.send("‚ùå Could not retrieve log statistics")
                await self.core.send_error_to_health_log(
                    "Could not retrieve log statistics - database may be unavailable",
                    "Log statistics request failed"
                )
                return
            
            embed = discord.Embed(
                title="üìä Hospital Log Statistics",
                color=0x3498db
            )
            
            embed.add_field(
                name="üìà Overview",
                value=f"Total Log Entries: {stats['total_logs']:,}\n"
                      f"Estimated Size: {stats['estimated_size_mb']} MB\n"
                      f"Recent Activity (7d): {stats['recent_activity_7d']:,}",
                inline=False
            )
            
            if stats['oldest_log'] and stats['newest_log']:
                embed.add_field(
                    name="üìÖ Date Range",
                    value=f"Oldest: {stats['oldest_log']}\n"
                          f"Newest: {stats['newest_log']}",
                    inline=True
                )
            
            # Action breakdown
            if stats['action_breakdown']:
                action_text = []
                for action_type, count in stats['action_breakdown'][:10]:  # Top 10
                    action_text.append(f"{action_type}: {count:,}")
                
                embed.add_field(
                    name="üéØ Action Types (Top 10)",
                    value="\n".join(action_text),
                    inline=True
                )
            
            # Maintenance status
            if hasattr(self.core, 'maintenance') and self.core.maintenance:
                maintenance_status = self.core.maintenance.get_maintenance_status()
                retention_text = 'Indefinite retention' if not maintenance_status['retention_enabled'] else f'Cleanup after {maintenance_status["retention_days"]} days'
                embed.add_field(
                    name="üõ†Ô∏è Retention Policy",
                    value=f"{retention_text}\n"
                          f"Backups: {'Enabled' if maintenance_status['backup_enabled'] else 'Disabled'}",
                    inline=False
                )
            
            embed.set_footer(text="Hospital logs are retained indefinitely by default")
            await ctx.send(embed=embed)
            
            # Send summary to health log
            await self.core.send_info_to_health_log(
                f"Log statistics: {stats['total_logs']:,} entries, {stats['estimated_size_mb']} MB, {stats['recent_activity_7d']:,} recent actions",
                "üìä Current Log Statistics"
            )
            
        except Exception as e:
            await ctx.send(f"‚ùå Failed to get log statistics: {e}")
            logging.error(f"‚ùå Failed to get hospital log statistics: {e}")
            await self.core.send_error_to_health_log(
                f"Log statistics request failed: {str(e)}",
                f"Error occurred while processing statistics request from {ctx.author.display_name}"
            )
    
    @commands.command(name="hospital_test_log")
    @commands.is_owner()
    async def test_health_log(self, ctx):
        """Test health log connectivity"""
        try:
            health_log_channel = await self.core.get_health_log_channel()
            
            if health_log_channel:
                await self.core.send_info_to_health_log(
                    f"Health log connectivity test initiated by {ctx.author.display_name}",
                    "üß™ Health Log Test"
                )
                
                await ctx.send(f"‚úÖ Health log test successful! Connected to #{health_log_channel.name}")
                
                # Test different message types
                await self.core.send_text_to_health_log(
                    "This is a test of the standard text logging function.",
                    "üìù Text Log Test"
                )
                
                await self.core.send_warning_to_health_log(
                    "This is a test warning message.",
                    "Warning log functionality test"
                )
                
                await self.core.send_error_to_health_log(
                    "This is a test error message.",
                    "Error log functionality test"
                )
                
                await self.core.send_info_to_health_log(
                    "Health log connectivity test completed successfully. All message types are working.",
                    "‚úÖ Health Log Test Complete"
                )
                
            else:
                await ctx.send("‚ùå Health log test failed - no health log channel available")
                
        except Exception as e:
            await ctx.send(f"‚ùå Health log test failed: {e}")
            logging.error(f"‚ùå Health log test failed: {e}")


async def setup(bot):
    """Setup function for the hospital system cog"""
    await bot.add_cog(HospitalSystem(bot))
    logging.info("‚úÖ Enhanced Hospital System cog loaded successfully with complete Health Log integration")